# 工作流名称
name: Build and Release Minio (Single Job)

# 触发工作流的事件
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的默认权限
permissions:
  contents: write

jobs:
  # 定义一个名为 "build-and-release" 的单一作业
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      # 第一步：检出代码（虽然我们不构建本地代码，但这是 Actions 的标准起始步骤）
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：安装和设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      
      # 第三步：创建用于存放构建产物的目录
      - name: Create release directory
        run: mkdir release

      # 第四步：使用交叉编译构建所有目标平台
      - name: Cross-compile for all platforms
        # 我们在一个步骤中循环构建所有平台
        run: |
          # 定义我们要构建的目标平台列表
          PLATFORMS="linux/amd64 linux/arm64"
          
          for platform in $PLATFORMS; do
            # 从 "linux/amd64" 中分离出 GOOS 和 GOARCH
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            
            # 定义输出文件名
            OUTPUT_NAME="minio-${GOOS}-${GOARCH}"
            
            echo "Building for ${GOOS}/${GOARCH}..."
            
            # 使用 env 设置环境变量来执行交叉编译
            # 请注意：我们仍然使用 go install，因为 go build 无法处理远程包语法
            env GOOS=$GOOS GOARCH=$GOARCH go install -v -trimpath -ldflags="-s -w" github.com/minio/minio@latest
            
            # go install 会把文件安装到 GOBIN 目录，我们把它移动到我们的发布目录
            mv "$(go env GOPATH)/bin/minio" "release/${OUTPUT_NAME}"
          done

      # 第五步：创建 GitHub Release 并上传所有二进制文件
      - name: Create Release and Upload Binaries
        uses: softprops/action-gh-release@v2
        with:
          # 使用通配符上传 release/ 目录下的所有文件
          files: release/*
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
